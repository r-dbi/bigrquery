% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbi-driver.R, R/dbi-connection.R,
%   R/dbi-result.R
\docType{class}
\name{DBI}
\alias{DBI}
\alias{BigQueryDriver-class}
\alias{dbConnect,bq_dataset-method}
\alias{show,BigQueryDriver-method}
\alias{dbGetInfo,BigQueryDriver-method}
\alias{dbIsValid,BigQueryDriver-method}
\alias{dbDataType,BigQueryDriver-method}
\alias{BigQueryConnection-class}
\alias{show,BigQueryConnection-method}
\alias{dbIsValid,BigQueryConnection-method}
\alias{dbDisconnect,BigQueryConnection-method}
\alias{dbSendQuery,BigQueryConnection,character-method}
\alias{dbExecute,BigQueryConnection,character-method}
\alias{dbQuoteString,BigQueryConnection,character-method}
\alias{dbQuoteString,BigQueryConnection,SQL-method}
\alias{dbQuoteIdentifier,BigQueryConnection,character-method}
\alias{dbQuoteIdentifier,BigQueryConnection,SQL-method}
\alias{dbQuoteLiteral,BigQueryConnection,logical-method}
\alias{dbDataType,BigQueryConnection-method}
\alias{dbWriteTable,BigQueryConnection,character,data.frame-method}
\alias{dbWriteTable,BigQueryConnection,Id,data.frame-method}
\alias{dbWriteTable,BigQueryConnection,AsIs,data.frame-method}
\alias{dbAppendTable,BigQueryConnection,character,data.frame-method}
\alias{dbAppendTable,BigQueryConnection,Id,data.frame-method}
\alias{dbAppendTable,BigQueryConnection,AsIs,data.frame-method}
\alias{dbCreateTable,BigQueryConnection-method}
\alias{dbReadTable,BigQueryConnection,character-method}
\alias{dbReadTable,BigQueryConnection,Id-method}
\alias{dbReadTable,BigQueryConnection,AsIs-method}
\alias{dbListTables,BigQueryConnection-method}
\alias{dbExistsTable,BigQueryConnection,character-method}
\alias{dbExistsTable,BigQueryConnection,Id-method}
\alias{dbExistsTable,BigQueryConnection,AsIs-method}
\alias{dbListFields,BigQueryConnection,character-method}
\alias{dbListFields,BigQueryConnection,Id-method}
\alias{dbListFields,BigQueryConnection,AsIs-method}
\alias{dbRemoveTable,BigQueryConnection,character-method}
\alias{dbRemoveTable,BigQueryConnection,Id-method}
\alias{dbRemoveTable,BigQueryConnection,AsIs-method}
\alias{dbGetInfo,BigQueryConnection-method}
\alias{dbBegin,BigQueryConnection-method}
\alias{dbCommit,BigQueryConnection-method}
\alias{dbRollback,BigQueryConnection-method}
\alias{BigQueryResult-class}
\alias{show,BigQueryResult-method}
\alias{dbIsValid,BigQueryResult-method}
\alias{dbClearResult,BigQueryResult-method}
\alias{dbFetch,BigQueryResult-method}
\alias{dbHasCompleted,BigQueryResult-method}
\alias{dbGetStatement,BigQueryResult-method}
\alias{dbColumnInfo,BigQueryResult-method}
\alias{dbGetRowCount,BigQueryResult-method}
\alias{dbGetRowsAffected,BigQueryResult-method}
\alias{dbBind,BigQueryResult-method}
\title{DBI methods}
\usage{
\S4method{dbConnect}{bq_dataset}(drv, ...)

\S4method{show}{BigQueryDriver}(object)

\S4method{dbGetInfo}{BigQueryDriver}(dbObj, ...)

\S4method{dbIsValid}{BigQueryDriver}(dbObj, ...)

\S4method{dbDataType}{BigQueryDriver}(dbObj, obj, ...)

\S4method{show}{BigQueryConnection}(object)

\S4method{dbIsValid}{BigQueryConnection}(dbObj, ...)

\S4method{dbDisconnect}{BigQueryConnection}(conn, ...)

\S4method{dbSendQuery}{BigQueryConnection,character}(conn, statement, ..., params = NULL)

\S4method{dbExecute}{BigQueryConnection,character}(conn, statement, ...)

\S4method{dbQuoteString}{BigQueryConnection,character}(conn, x, ...)

\S4method{dbQuoteString}{BigQueryConnection,SQL}(conn, x, ...)

\S4method{dbQuoteIdentifier}{BigQueryConnection,character}(conn, x, ...)

\S4method{dbQuoteIdentifier}{BigQueryConnection,SQL}(conn, x, ...)

\S4method{dbQuoteLiteral}{BigQueryConnection,logical}(conn, x, ...)

\S4method{dbDataType}{BigQueryConnection}(dbObj, obj, ...)

\S4method{dbWriteTable}{BigQueryConnection,character,data.frame}(
  conn,
  name,
  value,
  ...,
  overwrite = FALSE,
  append = FALSE,
  field.types = NULL,
  temporary = FALSE,
  row.names = NA
)

\S4method{dbWriteTable}{BigQueryConnection,Id,data.frame}(
  conn,
  name,
  value,
  ...,
  overwrite = FALSE,
  append = FALSE,
  field.types = NULL,
  temporary = FALSE,
  row.names = NA
)

\S4method{dbWriteTable}{BigQueryConnection,AsIs,data.frame}(
  conn,
  name,
  value,
  ...,
  overwrite = FALSE,
  append = FALSE,
  field.types = NULL,
  temporary = FALSE,
  row.names = NA
)

\S4method{dbAppendTable}{BigQueryConnection,character,data.frame}(conn, name, value, ..., row.names = NULL)

\S4method{dbAppendTable}{BigQueryConnection,Id,data.frame}(conn, name, value, ..., row.names = NULL)

\S4method{dbAppendTable}{BigQueryConnection,AsIs,data.frame}(conn, name, value, ..., row.names = NULL)

\S4method{dbCreateTable}{BigQueryConnection}(conn, name, fields, ..., row.names = NULL, temporary = FALSE)

\S4method{dbCreateTable}{BigQueryConnection}(conn, name, fields, ..., row.names = NULL, temporary = FALSE)

\S4method{dbReadTable}{BigQueryConnection,character}(conn, name, ...)

\S4method{dbReadTable}{BigQueryConnection,Id}(conn, name, ...)

\S4method{dbReadTable}{BigQueryConnection,AsIs}(conn, name, ...)

\S4method{dbListTables}{BigQueryConnection}(conn, ...)

\S4method{dbExistsTable}{BigQueryConnection,character}(conn, name, ...)

\S4method{dbExistsTable}{BigQueryConnection,Id}(conn, name, ...)

\S4method{dbExistsTable}{BigQueryConnection,AsIs}(conn, name, ...)

\S4method{dbListFields}{BigQueryConnection,character}(conn, name, ...)

\S4method{dbListFields}{BigQueryConnection,Id}(conn, name, ...)

\S4method{dbListFields}{BigQueryConnection,AsIs}(conn, name, ...)

\S4method{dbRemoveTable}{BigQueryConnection,character}(conn, name, ...)

\S4method{dbRemoveTable}{BigQueryConnection,Id}(conn, name, ...)

\S4method{dbRemoveTable}{BigQueryConnection,AsIs}(conn, name, ...)

\S4method{dbGetInfo}{BigQueryConnection}(dbObj, ...)

\S4method{dbBegin}{BigQueryConnection}(conn, ...)

\S4method{dbCommit}{BigQueryConnection}(conn, ...)

\S4method{dbRollback}{BigQueryConnection}(conn, ...)

\S4method{show}{BigQueryResult}(object)

\S4method{dbIsValid}{BigQueryResult}(dbObj, ...)

\S4method{dbClearResult}{BigQueryResult}(res, ...)

\S4method{dbFetch}{BigQueryResult}(res, n = -1, ...)

\S4method{dbHasCompleted}{BigQueryResult}(res, ...)

\S4method{dbGetStatement}{BigQueryResult}(res, ...)

\S4method{dbColumnInfo}{BigQueryResult}(res, ...)

\S4method{dbGetRowCount}{BigQueryResult}(res, ...)

\S4method{dbGetRowsAffected}{BigQueryResult}(res, ...)

\S4method{dbBind}{BigQueryResult}(res, params, ...)
}
\arguments{
\item{...}{Other arguments to methods.}

\item{object}{Any R object}

\item{dbObj}{An object inheriting from \link[DBI:DBIObject-class]{DBI::DBIObject},
i.e. \link[DBI:DBIDriver-class]{DBI::DBIDriver}, \link[DBI:DBIConnection-class]{DBI::DBIConnection}, or a \link[DBI:DBIResult-class]{DBI::DBIResult}.}

\item{obj}{An R object whose SQL type we want to determine.}

\item{conn}{A \link[DBI:DBIConnection-class]{DBI::DBIConnection} object, as returned by
\code{\link[DBI:dbConnect]{DBI::dbConnect()}}.}

\item{statement}{a character string containing SQL.}

\item{params}{For \code{dbBind()}, a list of values, named or unnamed,
or a data frame, with one element/column per query parameter.
For \code{dbBindArrow()}, values as a nanoarrow stream,
with one column per query parameter.}

\item{x}{A character vector to quote as string.}

\item{name}{The table name, passed on to \code{\link[DBI:dbQuoteIdentifier]{dbQuoteIdentifier()}}. Options are:
\itemize{
\item a character string with the unquoted DBMS table name,
e.g. \code{"table_name"},
\item a call to \code{\link[DBI:Id]{Id()}} with components to the fully qualified table name,
e.g. \code{Id(schema = "my_schema", table = "table_name")}
\item a call to \code{\link[DBI:SQL]{SQL()}} with the quoted and fully qualified table name
given verbatim, e.g. \code{SQL('"my_schema"."table_name"')}
}}

\item{value}{A \link{data.frame} (or coercible to data.frame).}

\item{overwrite}{a logical specifying whether to overwrite an existing table
or not. Its default is \code{FALSE}.}

\item{append}{a logical specifying whether to append to an existing table
in the DBMS.  Its default is \code{FALSE}.}

\item{field.types, temporary}{Ignored. Included for compatibility with
generic.}

\item{row.names}{A logical specifying whether the \code{row.names} should be
output to the output DBMS table; if \code{TRUE}, an extra field whose name
will be whatever the R identifier \code{"row.names"} maps to the DBMS (see
\code{\link[DBI:make.db.names]{DBI::make.db.names()}}). If \code{NA} will add rows names if
they are characters, otherwise will ignore.}

\item{fields}{Either a character vector or a data frame.

A named character vector: Names are column names, values are types.
Names are escaped with \code{\link[DBI:dbQuoteIdentifier]{dbQuoteIdentifier()}}.
Field types are unescaped.

A data frame: field types are generated using
\code{\link[DBI:dbDataType]{dbDataType()}}.}

\item{res}{An object inheriting from \link[DBI:DBIResult-class]{DBI::DBIResult}.}

\item{n}{maximum number of records to retrieve per fetch. Use \code{n = -1}
or \code{n = Inf}
to retrieve all pending records.  Some implementations may recognize other
special values.}
}
\description{
Implementations of pure virtual functions defined in the \code{DBI} package.
}
\keyword{internal}
